apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion '25.0.0'
    dexOptions {
        javaMaxHeapSize "4g"
    }
    splits {
        abi {
            enable true
            reset()
            include 'armeabi'//只打包armeabi平台的，就算有其他文件夹也不管
//                include 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'mips', 'x86', 'x86_64'
        }
    }
    defaultConfig {
        applicationId "com.show.specialshow"
        minSdkVersion 14
        targetSdkVersion 23
        multiDexEnabled true
        ndk {
            //选择要添加的对应cpu类型的.so库。
            abiFilters 'armeabi'
//            , 'armeabi-v7a', 'armeabi-v8a'
            // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
        }
        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "aaaa1fbf4f9581e91412b5c4", //JPush上注册的包名对应的appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]
    }
    //签名
    signingConfigs {
        release {
            storeFile file('/Users/xuyong/特秀美妆工作/特秀美妆正式签名文件/beauty_manage_texiu_android.jks')
            storePassword '^na*(@$o!_t'
            keyAlias 'yinlaicfmoneymanagetx'
            keyPassword '$$8c6a33@9#t'
        }
        debug {
            storeFile file('/Users/xuyong/特秀美妆工作/特秀美妆正式签名文件/beauty_manage_texiu_android.jks')
            storePassword '^na*(@$o!_t'
            keyAlias 'yinlaicfmoneymanagetx'
            keyPassword '$$8c6a33@9#t'
        }
    }

    buildTypes {
//        debug{
//            // 不显示Log
//            buildConfigField "boolean", "LOG_DEBUG", "true"
//
//            minifyEnabled true
//            zipAlignEnabled true
//            // 移除无用的resource文件
//            shrinkResources true
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            signingConfig signingConfigs.debug
//
//            applicationVariants.all { variant ->
//                variant.outputs.each { output ->
//                    def outputFile = output.outputFile
//                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                        // 输出apk名称为特秀美妆channelx.apk
////                        def fileName = "特秀美妆${variant.productFlavors[0].name}.apk"
//                        def fileName = "特秀美妆debug.apk"
//                        output.outputFile = new File(outputFile.parent, fileName)
//                    }
//                }
//            }
//        }
        release {
            // 不显示Log
            buildConfigField "boolean", "LOG_DEBUG", "false"

            minifyEnabled true
            zipAlignEnabled true
            // 移除无用的resource文件
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        // 输出apk名称为特秀美妆channelx.apk
//                        def fileName = "特秀美妆${variant.productFlavors[0].name}.apk"
                        def fileName = "特秀美妆.apk"
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
                }
            }
        }
    }
    lintOptions {
        abortOnError false
        checkReleaseBuilds false
        // 防止在发布的时候出现因MissingTranslation导致Build Failed!
        disable 'MissingTranslation'
        disable "ResourceType"

    }
    sourceSets {
        main() {
            jniLibs.srcDirs = ['libs']
        }
    }
    task nativeLibsToJar(type: Zip, description: "create a jar archive of the native libs") {
        destinationDir file("$projectDir/libs")
        baseName "Native_Libs2"
        extension "jar"
        from fileTree(dir: "libs", include: "**/*.so")
        into "lib"
    }
    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn(nativeLibsToJar)
    }

}

dependencies {
    compile files('libs/bolts-android-1.2.0.jar')
    compile files('libs/commons-lang3-3.3.jar')
    compile files('libs/easemobchat_2.2.9.jar')
    compile files('libs/fastjson-1.1.33.jar')
    compile files('libs/google-play-services.jar')
    compile files('libs/MiPush_SDK_Client_2_2_19.jar')
    compile files('libs/Parse-1.9.4.jar')
    compile files('libs/pinyin4android1.0.jar')
    compile files('libs/pinyin4j-2.5.0.jar')
    compile files('libs/xUtils-2.6.14.jar')
    compile project(':umeng_community_discuss_library_project')
    compile files('libs/AMap3DMap_3.3.3_AMapNavi_1.9.1_20160726.jar')
    compile files('libs/Msc.jar')
    compile 'com.google.zxing:core:3.2.1'
    compile 'com.android.support:multidex:1.0.1'
    compile project(':library')
    compile 'cn.jiguang.sdk:jpush:3.0.0'
    compile 'cn.jiguang.sdk:jcore:1.0.0'
    compile 'com.mylhyl:acp:1.1.7'
    //    compile('com.android.support:support-v4:23.4.0') {
    //    }
    compile project(':pingpp')
    compile 'cn.bingoogolapple:bga-banner:2.1.4@aar'
//    compile files('libs/Native_Libs2.jar')
}
